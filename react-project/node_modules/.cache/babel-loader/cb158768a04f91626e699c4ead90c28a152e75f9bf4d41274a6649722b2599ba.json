{"ast":null,"code":"export const findAllPets = async () => {\n  const res = await fetch(`/database-arr.json`, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await res.json();\n  return data;\n};\n// search function\nexport const searchPets = async function () {\n  let keyword = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let age = arguments.length > 1 ? arguments[1] : undefined;\n  let gender = arguments.length > 2 ? arguments[2] : undefined;\n  let size = arguments.length > 3 ? arguments[3] : undefined;\n  let color = arguments.length > 4 ? arguments[4] : undefined;\n  let distance = arguments.length > 5 ? arguments[5] : undefined;\n  const res = await fetch(`/database-arr.json`, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const dogDatabase = await res.json();\n  const matchedPetsByKeyword = dogDatabase.filter(pet => {\n    if (!keyword) {\n      return true;\n    }\n    return pet.name.toUpperCase().includes(keyword.toUpperCase()) || pet.breed.toUpperCase().includes(keyword.toUpperCase()) || pet.size.toUpperCase().includes(keyword.toUpperCase()) || pet.color.toUpperCase().includes(keyword.toUpperCase()) || pet.ageCategory.toUpperCase().includes(keyword.toUpperCase()) || pet.habits.includes(keyword);\n  });\n  const matchedPets = matchedPetsByKeyword.filter(pet => {\n    let matched = true;\n    if (age && age !== 'all') {\n      let ageMatched = pet.ageCategory.toUpperCase() === age.toUpperCase();\n      matched = matched && ageMatched;\n    }\n    if (gender && gender !== 'all') {\n      let genderMatched = pet.gender.toUpperCase() === gender.toUpperCase();\n      matched = matched && genderMatched;\n    }\n    if (size && size !== 'all') {\n      let sizeMatched = pet.size.toUpperCase() === size.toUpperCase();\n      matched = matched && sizeMatched;\n    }\n    if (color && color !== 'all') {\n      let colorMatched = pet.color.toUpperCase() === color.toUpperCase();\n      matched = matched && colorMatched;\n    }\n    if (distance && distance !== 'all') {\n      let maxDistance = distance.match(/\\d+/g)[0];\n      maxDistance = Number(maxDistance);\n      let petDistance = pet.adoptionDistance.match(/\\d+/g)[0];\n      petDistance = Number(petDistance);\n      let distanceMatched = petDistance <= maxDistance;\n      matched = matched && distanceMatched;\n    }\n    return matched;\n  });\n  return matchedPets;\n};","map":{"version":3,"names":["findAllPets","res","fetch","headers","data","json","searchPets","keyword","arguments","length","undefined","age","gender","size","color","distance","dogDatabase","matchedPetsByKeyword","filter","pet","name","toUpperCase","includes","breed","ageCategory","habits","matchedPets","matched","ageMatched","genderMatched","sizeMatched","colorMatched","maxDistance","match","Number","petDistance","adoptionDistance","distanceMatched"],"sources":["/Users/siyuanji/Documents/info340/project-GROUPWORK/react-project/src/services/search-pet.js"],"sourcesContent":["\r\nexport const findAllPets = async () => {\r\n  const res = await fetch(`/database-arr.json`, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n  const data = await res.json();\r\n\r\n  return data;\r\n}\r\n// search function\r\nexport const searchPets = async (keyword = '', age, gender, size, color, distance) => {\r\n  const res = await fetch(`/database-arr.json`, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n  const dogDatabase = await res.json();\r\n\r\n  const matchedPetsByKeyword = dogDatabase\r\n    .filter(pet => {\r\n      if (!keyword) {\r\n        return true;\r\n      }\r\n      return pet.name.toUpperCase().includes(keyword.toUpperCase())\r\n        || pet.breed.toUpperCase().includes(keyword.toUpperCase())\r\n        || pet.size.toUpperCase().includes(keyword.toUpperCase())\r\n        || pet.color.toUpperCase().includes(keyword.toUpperCase())\r\n        || pet.ageCategory.toUpperCase().includes(keyword.toUpperCase())\r\n        || pet.habits.includes(keyword);\r\n    });\r\n  const matchedPets = matchedPetsByKeyword\r\n    .filter(pet => {\r\n      let matched = true;\r\n\r\n      if (age && age !== 'all') {\r\n        let ageMatched = pet.ageCategory.toUpperCase() === age.toUpperCase();\r\n        matched = matched && ageMatched;\r\n      }\r\n\r\n      if (gender && gender !== 'all') {\r\n        let genderMatched = pet.gender.toUpperCase() === gender.toUpperCase();\r\n        matched = matched && genderMatched;\r\n      }\r\n\r\n      if (size && size !== 'all') {\r\n        let sizeMatched = pet.size.toUpperCase() === size.toUpperCase();\r\n        matched = matched && sizeMatched;\r\n      }\r\n\r\n      if (color && color !== 'all') {\r\n        let colorMatched = pet.color.toUpperCase() === color.toUpperCase();\r\n        matched = matched && colorMatched;\r\n      }\r\n\r\n      if (distance && distance !== 'all') {\r\n        let maxDistance = distance.match(/\\d+/g)[0];\r\n        maxDistance = Number(maxDistance);\r\n        let petDistance = pet.adoptionDistance.match(/\\d+/g)[0];\r\n        petDistance = Number(petDistance);\r\n        let distanceMatched = petDistance <= maxDistance;\r\n        matched = matched && distanceMatched;\r\n      }\r\n\r\n      return matched;\r\n\r\n\r\n    })\r\n\r\n  return matchedPets;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}